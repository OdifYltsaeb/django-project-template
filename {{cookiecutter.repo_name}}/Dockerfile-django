# Development Dockerfile for Django app

FROM registry.gitlab.com/thorgate-public/docker-images/python{{ cookiecutter.python_version }}-base

# Set to yes if building a development image (passed down to pipenv)
ARG DEV="no"

COPY Pipfile /
COPY Pipfile.lock /

# Install all dependencies from Pipfile.lock file
# NOTE the PIPENV_DEV={yes|no} env var controls the --dev behavior
RUN PIPENV_DEV="${DEV}" pipenv install --system --ignore-pipfile

# cleanup
RUN \
    # ignore libpython - that one comes from the pyenv instalation
    find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';' \
        | tr ',' '\n' \
        | sort -u \
        | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' \
        | grep -ve 'libpython' \
        | xargs -rt apk add --no-cache --virtual .python-rundeps ;\
        # for debug
        # | xargs -n1 echo ;\
    # delete everything from pyenv except the installed version
    find /usr/local/lib/pyenv/ -mindepth 1 -maxdepth 1 -name versions -prune -o -exec rm -rf {} + ;\
    # delete files to to reduce container size
    # tips taken from main python docker repo
    find /usr/local/lib/pyenv/versions/$PYTHON_VERSION/ -depth \( -name '*.pyo' -o -name '*.pyc' \) -exec rm -rf '{}' + ;\
    # remove build dependencies and any leftover apk cache
    apk del --no-cache --purge .build-deps ;\
    rm -rf /var/cache/apk/*

WORKDIR /app
# since we will be "always" mounting the volume, we can set this up
ENTRYPOINT ["/usr/bin/dumb-init"]
CMD ["/bin/sh"]
