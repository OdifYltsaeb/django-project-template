# Production Dockerfile for Django app

FROM registry.gitlab.com/thorgate-public/docker-images/python{{ cookiecutter.python_version }}-base

# Set to yes if building a development image (passed down to pipenv)
ARG DEV="no"

COPY Pipfile /
COPY Pipfile.lock /

# Install all dependencies from Pipfile.lock file
# NOTE the PIPENV_DEV={yes|no} env var controls the --dev behavior
RUN PIPENV_DEV="${DEV}" pipenv install --system --ignore-pipfile

# cleanup
RUN \
    # ignore libpython - that one comes from the pyenv instalation
    find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';' \
        | tr ',' '\n' \
        | sort -u \
        | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' \
        | grep -ve 'libpython' \
        | xargs -rt apk add --no-cache --virtual .python-rundeps ;\
        # for debug
        # | xargs -n1 echo ;\
    # delete everything from pyenv except the installed version
    find /usr/local/lib/pyenv/ -mindepth 1 -maxdepth 1 -name versions -prune -o -exec rm -rf {} + ;\
    # delete files to to reduce container size
    # tips taken from main python docker repo
    find /usr/local/lib/pyenv/versions/$PYTHON_VERSION/ -depth \( -name '*.pyo' -o -name '*.pyc' \) -exec rm -rf '{}' + ;\
    # remove build dependencies and any leftover apk cache
    apk del --no-cache --purge .build-deps ;\
    rm -rf /var/cache/apk/*

WORKDIR /app
# since we will be "always" mounting the volume, we can set this up
ENTRYPOINT ["/usr/bin/dumb-init"]
CMD ["/bin/sh"]

ENV DJANGO_PRODUCTION_MODE 1

# Create a directory for the logs
RUN mkdir -p /var/log/{{cookiecutter.repo_name}}

# Install all dependencies from Pipfile.lock file
RUN pipenv install --system --ignore-pipfile

# Find all file objects containing name `test` or compiled python files and remove them
# Find all runtime dependencies that are marked as needed by scanelf
# scanelf is utility to show ELF data for binary objects
# For more info: https://wiki.gentoo.org/wiki/Hardened/PaX_Utilities#The_scanelf_application
# Finally re-install missing run-dependencies
RUN find /usr/local \
        \( -type d -a -name test -o -name tests \) \
        -o \( -type f -a -name '*.pyc' -o -name '*.pyo' \) \
        -exec rm -rf '{}' + \
  && runDeps="$( \
        scanelf --needed --nobanner --recursive /usr/local \
                | awk '{ gsub(/,/, "\nso:", $2); print "so:" $2 }' \
                | sort -u \
                | xargs -r apk info --installed \
                | sort -u \
    )" \
  && apk add --virtual .rundeps $runDeps

# Remove build dependencies
RUN apk del .build-deps

# Copy code
COPY ./{{cookiecutter.repo_name}} /app

# Set the default directory where CMD will execute
WORKDIR /app

# Compile translations to .mo files
{% if cookiecutter.include_cms == 'yes' -%}
# Note: DJANGO_CMS_PAGE_CACHE=False ensures django-cms does not try to connect to redis during the image build
{% endif -%}
RUN cd /app && {% if cookiecutter.include_cms == 'yes' %}DJANGO_CMS_PAGE_CACHE=False {% endif %}python manage.py compilemessages

# Based on Node 10.x LTS image
FROM node:{% if cookiecutter.node_version == '10' %}10.15.1{% else %}{{ cookiecutter.node_version }}{% endif %}-alpine as node_builder

# Set the default directory where CMD will execute
WORKDIR /app

# Install node build dependencies
# Not removing them as not to break fabfile logic for exporting assets
# These can be removed with: "RUN apk del .build-deps"
RUN apk add --no-cache --virtual .build-deps build-base python

# Copy some utility files
COPY ./{{ cookiecutter.repo_name }}/.babelrc .
COPY ./{{ cookiecutter.repo_name }}/.eslintrc .
COPY ./{{ cookiecutter.repo_name }}/.eslintignore .

# Install node requirements
COPY ./{{ cookiecutter.repo_name }}/package.json .
COPY ./{{ cookiecutter.repo_name }}/yarn.lock ./

# Install node dependencies
RUN yarn install --frozen-lockfile

# Copy app assets
COPY ./{{ cookiecutter.repo_name }}/app /app/app
COPY ./{{ cookiecutter.repo_name }}/static /app/static

# Build node stuff
RUN yarn build

# Resume Django build
FROM base

# Copy all from node image
COPY --from=node_builder /app/app/build /app/app/build
COPY --from=node_builder /app/app/webpack-stats.json /app/app/webpack-stats.json

# Run Gunicorn by default
CMD gunicorn {{ cookiecutter.repo_name }}.wsgi:application --workers 2 --bind :80
